@using Entities
@using Business

<div class="form-group">
    <label for="ddlWarehouses">Bodega:</label>
    <select id="ddlWarehouses" class="form-control" @onchange="OnChangeWareHouse">
        <option value="">Seleccione una bodega...</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseID">@warehouse.WarehouseName</option>
        }
    </select>
</div>
<hr />

<EditForm Model="oInOut">
    <div class="form-group">
        <label for="ddlStorages">Producto:</label>
        <InputSelect id="ddlStorages" class="form-control" @bind-Value="oInOut.StorageId">
            <option value="">Seleccione un Producto...</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="txtQuantity">Cant.:</label>
        <InputNumber id="txtQuantity" class="form-control" @bind-Value="oInOut.Quantity" />
    </div>

    <div class="form-group">
        <div class="form-check">
            <input id="chkIsOut" class="form-check-input" type="checkbox" @bind="oInOut.IsInput" />
            <label class="form-check-label" for="chkIsOut">¿Es una Entrada?</label>
        </div>
    </div>
    <br />

    <div class="form-group mb-4">
        <button type="button" class="btn btn-primary" style="width: 200px; height: 40px;" @onclick="SaveInOut">@buttonValue</button>
    </div>
</EditForm>

<div class="text-center h4">
    @message
</div>


@code {
    InputOutputEntity oInOut = new InputOutputEntity();

    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();

    List<StorageEntity> storages = new List<StorageEntity>();


    ProductEntity oProduct = new ProductEntity();

    StorageEntity oStorage = new StorageEntity();

    string buttonValue => oInOut.IsInput ? "Registrar Entrada" : "Registrar Salida";
    string message;

    protected override async Task OnInitializedAsync()
    {
        warehouses = B_WareHouse.WarehouseList();
    }

    private void OnChangeWareHouse(ChangeEventArgs e)
    {
        var idWareHouse = e.Value.ToString();

        storages = B_Storage.StorageProductByWareHouse(idWareHouse);
    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            B_Product.UpdateProducts(oProduct);

            message = $"El producto {oProduct.ProductName} ha sido actualizado";
        }
        else
        {
            if (esMayorCero(oInOut.Quantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                B_Product.UpdateProducts(oProduct);
                message = $"El producto {oProduct.ProductName} ha sido actualizado";
            }
            else
            {
                message = $"No existe la cantidad suficiente en bodega para el {oProduct.ProductName}";
                //message = $"No existe la cantidad suficiente en bodega para el {oProduct.ProductName}";
            }

        }
    }

    private bool esMayorCero(int cant, int StorageCant)
    {
        if (StorageCant >= cant)
        {
            return true;
        }
        return false;
    }
}
